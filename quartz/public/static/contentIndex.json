{"About/Introduce/00-About-Me":{"title":"关于我","links":[],"tags":["about"],"content":"基本信息 §\n\n姓名：****** （不可说~，一般还是叫我Ailurus，可以读艾露露~）\n性别：男\n年龄：26\n联系方式：\nGithub: Ailurus-2233 (Aillurus2233) (github.com)\nE-mail: Ailurus2233@outlook.com\nWeChat: Zyu_Work\n\n个人性格 §\n个人性格真的很难总结的很恰当，就随便写写，希望以下的话能让你对我有个初步的认识。\n爱好的话，还是喜欢玩游戏，最想的生活就是，一天工作结束后可以在电脑前玩自己想玩的游戏（我是原X），除此之外的话，比较喜欢看一些纪录片、动漫之类的视频；喜欢唱歌，但是工作之后就没再去过KTV（工作太忙了，可恶啊！！！）\n在工作学习上的话，个人觉得自己还是一个认真负责的人，喜欢去钻研一些新的技术（俗称瞎折腾），当然在工作任务上面更喜欢有明确目标的去完成，那些开放型的任务对我来说有点点难搞，（也不知道做到什么程度合适，就是总感觉做的不太够，然后逼得自己去卷）\n个人生活中的话，emmmm，社恐，hin社恐，就是一个内向的程序员，但是可能在网上就体现的不是很明显，但不是键盘侠，不喜欢随意的去责难一些人或者事，网上和生活中都一样。"},"About/Introduce/01-Education":{"title":"教育经历","links":[],"tags":["about"],"content":"河南大学 §\n\n学院：软件学院\n专业：软件工程\n学位：硕士\n研究方向：供应链检测\n时间：2020.09 - 2023.06\nGPA：4.29/4.7（1/56 专业前2%）\n\n长沙理工大学 §\n\n学院：数学与统计学院\n专业：信息与计算科学\n学位：本科\n时间：2015.09 - 2019.06\n"},"About/Introduce/02-Work":{"title":"工作经历","links":[],"tags":["about"],"content":"中国科学院信息工程研究所   §\n\n地点：北京 海淀 中国科学院信息工程研究所  \n职位：科研助理\n时间：2021/04-2023/06\n工作内容：以科研助理的身份参与信息工程研究所的研究与系统的开发，研究的主要方向为物联网安全，供应链检测。参与项目有软件供应链信息推断系统，物联网设备知识图谱系统，主要负责的工作内容有后端开发与系统测试，其中软件供应链信息推断系统是从设计开发到落地执行全程参与的项目。\n使用技术：Java、Python、Mysql、Spring Boot、Mybatis\n\n苏州迈为科技股份有限公司 §\n\n地点：苏州 吴江 苏州迈为科技股份有限公司\n职位：软件开发工程师\n时间：2023/07-至今\n工作内容：负责激光产品线工控机上位软件开发工作，为整个工艺流程提供硬件控制、信息处理以及可视化操作等服务，参与项目有LED巨量转移、LED单点修复。\n使用技术：C#、WPF、Stylet、Sqlite\n"},"About/Introduce/03-Qualification-Certificate":{"title":"资质证书","links":[],"tags":["about"],"content":"软件设计师资格证 §\n华为认证网络工程师 §"},"About/Introduce/04-Awards":{"title":"获奖经历","links":[],"tags":["about"],"content":"学生时期的奖项 §\n全国大学生统计建模大赛 §\n奖项等级：国家级 获奖等级：二等奖 获奖时间：2017.12\n描述：三人为一组参与全国大学生统计建模大赛，在其中主要负责数据收集和程序编写的工作\n湖南省数学学会数学教学研讨会优秀论文 §\n奖项等级：省市级 获奖等级：二等奖 获奖时间：2018.11\n描述：湖南省数学学会领导的教学研讨会项目成果，在该项目中负责算法设计与程序编写\n长沙理工大学ACM比赛 §\n奖项等级：校级 获奖等级：二等奖 获奖时间：2018.04\n描述：三人一组参与比赛，在规定时间内完成算法题目，排名11/65，获得二等奖\n校级优秀毕业生 §\n奖项等级：校级 获奖等级：二等奖 获奖时间：2019.06\n描述：根据综合成绩以及论文答辩情况，被评为2019年优秀毕业生\n长沙理工大学-校级奖学金 §\n奖项等级：校级 获奖等级：二等奖 获奖时间：2015-2019\n描述：根据学习成绩，德育成绩及体育成绩的综合情况，获得二等奖学金\n研究生一等奖学金 §\n奖项等级：校级 获奖等级：一等奖 获奖时间：2020-2022\n描述：根据学习成绩与学术成绩总和评价，获得研究生一等奖学金"},"About/Introduce/05-Achievement":{"title":"个人成果","links":[],"tags":["about"],"content":"论文 §\nCWSN 2022 - A Graph Neural Network Based Model for IoT Binary Components Similarity Detection\nIJCNN 2023 - CEntRE: A Paragraph-Level Chinese Dataset for Relation Extraction Among Enterprises\n专利 §\nCN116339720A - 二进制文件相似度匹配方法、装置及存储介质"},"About/关于About的说明":{"title":"关于About的说明","links":["90-publish/About/Introduce/00-About-Me","About/Introduce/01-Education","About/Introduce/02-Work","About/Introduce/03-Qualification-Certificate","About/Introduce/04-Awards","About/Introduce/05-Achievement"],"tags":["about"],"content":"这个模块是对博主本人一个说明，许多关于我的信息可以在这里找到，比如联系方式、当前的工作、近期的状态、工作情况、最近在忙的一些事情等等。\n以下是这一模块的目录\n\n00-About Me\n01-Education\n02-Work\n03-Qualification Certificate\n04-Awards\n05-Achievement\n"},"Daily/关于Daily的说明":{"title":"关于Daily的说明","links":[],"tags":["daily"],"content":""},"Note/关于Note的说明":{"title":"关于Note的说明","links":[],"tags":["note"],"content":""},"Note/常见问题/高并发场景下，怎么保证数据的一致性的":{"title":"高并发场景下，怎么保证数据的一致性的","links":[],"tags":["软件设计","软件工程"],"content":"简述 §\n高并发的场景下，往往需要缓存数据库+实际数据库来减轻数据库的检索压力，加快查询效率。然而一份数据存储在两个地方，更新数据的时候，往往会出现数据不一致的情况，比如实际数据库更新了数据，但是缓存数据库没有更新等等，所以这时候设计逻辑就需要考虑到数据库更新时的流程。\n整理一下，可以描述为\n一致性就是数据保持一致，在分布式系统中，可以理解为多个节点中数据的值是一致的。\n强一致性：这种一致性级别是最符合用户直觉的，它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大\n弱一致性：这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态\n最终一致性：最终一致性是弱一致性的一个特例，系统会保证在一定时间内，能够达到一个数据一致的状态。这里之所以将最终一致性单独提出来，是因为它是弱一致性中非常推崇的一种一致性模型，也是业界在大型分布式系统的数据一致性上比较推崇的模型\n保证数据一致性，一般有这4种方法：\n\n先更新缓存，再更新数据库。\n先更新数据库，再更新缓存。\n先删除缓存，再更新数据库。\n先更新数据库，再删除缓存。\n\n一般情况分析 §\n1 先更新缓存，再更新数据库： §\n如果同时来了两个并发写请求，执行过程是这样的：\n\n写请求1更新缓存，设置值为1\n写请求2更新缓存，设置值为2\n写请求2更新数据库，设置值为2\n写请求1更新数据库，设置值为1\n\n执行结果就是，缓存里值被设置2，数据库里的值被设置成1，导致数据不一致，此方案不可行。\n2 先更新数据库，再更新缓存 §\n如果同时来了两个并发写请求，执行过程是这样的：\n\n写请求1更新数据库，设置值为1\n写请求2更新数据库，设置值为2\n写请求2更新缓存，设置值为2\n写请求1更新缓存，设置值为1\n\n执行结果就是，数据库里值被设置2，缓存里的值被设置成1，导致数据不一致，此方案不可行。\n3 先删除缓存，再更新数据库 §\n如果同时来了两个并发读写请求，执行过程是这样的：\n\n写请求删除了缓存\n读请求查询缓存没数据，然后查询数据库，再把数据写到缓存中\n写请求更新数据库\n\n执行结果是，缓存中是旧数据，而数据库里是新数据，导致数据不一致，此方案不可行。\n4 先更新数据库，再删除缓存 §\n这种方案，在并发写的时候，不会出问题。因为都是先更新数据库再删除缓存，不会出现不一致的情况。\n但是在并发读写的时候，还是有可能出现数据不一致。\n\n读请求查询缓存没数据，然后查询数据库\n写请求更新数据库，删除缓存\n读请求回写缓存\n\n执行结果是，缓存中是旧数据，而数据库里是新数据，导致数据不一致。但其实这种情况出现的概率很低，写缓存比写数据库快出几个量级，读写缓存都是内存操作，速度非常快。遇到了这种极端场景，我们也需要做一下兜底方案，缓存都要设置过期时间。这种方案属于数据的弱一致性和最终一致性，而不是强一致性。"},"Note/软件工程/测试理论基础":{"title":"测试理论基础","links":[],"tags":["测试理论","基础知识","软件工程"],"content":"1 什么是软件测试 §\n\n用来促进鉴定软 件的正确性、完整性、安全性和质量的过程；\n是一种实际输出与预期输出间的审核或者比较过程；\n使用人工和自动手段来运行或测试某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别；\n\n2 软件测试的分类 §\n\n按开发阶段来分：单元测试、集成测试、系统测试、验收测试。\n按测试的实施单位来分：开发方测试、用户测试、第三方测试。\n按测试技术来分：白盒测试、黑盒测试、灰盒测试。\n\n3 软件测试的常用种类 §\n黑盒测试： 把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试或数据驱动测试。\n黑盒测试方法包括：等价类划分、边界值分析、因果图分析、错误推测法、功能图分析等。\n白盒测试： 是对软件的过程性细节做细致的检查。是把测试对象看做一个打开的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试或逻辑驱动测试。\n白盒测试方法包括：语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、条件组合覆盖、路径覆盖等。\n单元测试： 是对软件中的基本组成单位进行的测试，如一个模块、一个过程等等。它是软件动态测试的最基本的部分，也是最重要的部分之一，其目的是检验软件基本组成单位的正确性。一个软件单元的正确性是相对于该单元的规约(详细设计)而言的。因此，单元测试以被测试单位的规约为基准。\n单元测试方法包括：控制流测试、数据流测试、排错测试、分域测试等。\n集成测试： 是在软件系统集成过程中所进行的测试，其主要目的是检查软件单位之间的接口是否正确。它根据集成测试计划，一边将模块或其他软件单位组合成越来越大的系统，一边运行该系统，以分析所组成的系统是否正确，各组成部分是否合拍。集成测试的策略主要有自顶向下和自底向上两种。\n系统测试： 是对已经集成好的软件系统进行彻底的测试，以验证软件系统的正确性和性能等满足其规约所指定的要求，检查软件的行为和输出是否正确并非一项简单的任务，它被称为测试的“先知者问题”。因此，系统测试应该按照测试计划进行，其输入、输出和其他动态运行行为应该与软件规约进行对比。\n软件系统测试方法很多，主要有功能测试、性能测试、随机测试等。\n验收测试： 由客户或最终用户执行，旨在向软件的购买者展示该软件系统满足其用户的需求。它的测试数据通常是系统测试的测试数据的子集。所不同的是，验收测试常常有软件系统的购买者代表在现场，甚至是在软件安装使用的现场。这是软件在投入使用之前的最后测试。\n功能测试： 对产品的各功能进行验证，根据功能测试用例，逐项测试，检查产品是否达到用户要求的功能。\n性能测试： 是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统各项性能指标的变化情况。压力测试是通过确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大服务级别的测试。\n负载测试： 数据在超负荷环境下运行，测试软件系统是否能够承担。这种超负荷主要指多并发用户。通常需要人为生成大数据量，并利用工具模拟频繁并发访问，主要考察诸如响应时间、交易容量、资源使用率等指标。\n压力测试： 指系统不断施加越来越大的负载（并发，循环操作，多用户，网络流量）的测试。通过确定一个系统的瓶颈或者不能接收的性能点，来确定系统能提供的最大服务级别的测试。\n恢复测试： 恢复测试主要检查系统的容错能力。当系统出错时，能否在指定时间间隔内修正错误并重新启动系统。恢复测试首先要采用各种办法强迫系统失败，然后验证系统是否能尽快恢复。如果系统恢复是自动的（即恢复由系统自身完成），则应该检验以下内容：重新初始化、检验点设置机构、数据恢复以及重新启动是否正确。\n可用性测试： 可用性测试是面向用户的系统测试。让一群有代表性的用户尝试对产品进行典型操作，同时观察员和开发人员在一旁观察，聆听，做记录。\n兼容性测试： 测试软件在一个特定的硬件、软件、操作系统、网络等环境下系统能否正常运行。检验被测软件对其他应用软件或者其他系统的兼容性。\n安全性测试： 安全测试检测系统对非法入侵的防范能力。例如，应用程序级别的安全性测试，数据库安全性测试，系统级别的安全性测试等等。\n冒烟测试： 可以根据其名称理解为该种测试耗时短；其实是对软件基本的功能进行测试，测试的对象是每一个新编译的需要正式测试的软件版本，目的是确认软件基本的功能正常，保证软件系统能跑得起来，可以进行后续的正式测试工作。\n回归测试： 是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误，回归测试的困难在于不好确定哪些内容应当被重新测试。\n随机测试： 主要是根据测试者的经验对软件进行功能和性能抽查。它是根据测试说明书执行样例测试的重要补充手段，是保证测试覆盖完整性的有效方式和过程。\n动态测试： 是指通过运行被测程序，检查运行结果与预期结果的差异，并分析运行效率和健壮性等性能，这种方法由三部分组成：构造测试实例、执行程序、分析程序的输出结果。所谓软件的动态测试，就是通过运行软件来检验软件的动态行为和运行结果的正确性。目前，动态测试也是公司的测试工作的主要方式。\n静态测试： 是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。对需求规格说明书、软件设计说明书、源程序做结构分析、流程图分析、符号执行来找错。静态方法通过程序静态特性的分析，找出欠缺和可疑之处，例如不匹配的参数、不适当的循环嵌套和分支嵌套、不允许的递归、未使用过的变量、空指针的引用和可疑的计算等。静态测试结果可用于进一步的查错，并为测试用例选取提供指导。\nUI测试： 指测试用户界面的风格是否满足客户要求，文字是否正确，页面美工是否好看，文字，图片组合是否完美，背景是否美观，操作是否友好等；用户界面(UI)测试用于核实用户与软件之间的交互。UI测试的目标是确保用户界面会通过测试对象的功能来为用户提供相应的访问或浏览功能。另外，UI测试还可确保UI中的对象按照预期的方式运行，并符合公司或行业的标准。包括用户友好性，人性化，易操作性测试。UI测试比较主观，与测试人员的喜好有关。\n自动化测试： 利用软件测试工具自动实现全部或部分测试，它是软件测试的一个重要组成部分，能完成许多手工测试无法实现或难以实现的测试；正确、合理的实施自动测试，能够快速、全面的对软件进行测试，从而提高软件质量，节省经费，缩短软件发布周期。"},"Note/软件工程/测试用例八大设计方法":{"title":"测试用例八大设计方法","links":[],"tags":["测试理论","基础知识","软件工程"],"content":"测试方法分类： §\n\n黑盒测试 ：等价类划分 边界值分析 因果图分析 错误测试\n白盒测试：语句覆盖 判定覆盖 条件覆盖 判定/条件覆盖 多重条件覆盖\n\n黑盒测试 §\n等价类划分方法 §\n等价类划分：指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的，并合理地假定；测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据，取得较好的测试结果。\n等价类划分可有两种不同的情况：有效等价类和无效等价类。\n边界值分析方法 §\n边界值：是对等价类划分方法的补充，测试工作经验告诉我,大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。\n错误推测方法 §\n错误推测：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。\n错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。例如：在单元测试时曾列出的许多在模块中常见的错误。以前产品测试中曾经发现的错误等，这些就是经验的总结。还有，输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行。这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。\n因果图方法 §\n前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件,但未考虑输入条件之间的联系，相互组合等。考虑输入条件之间的相互组合，可能会产生一些新的情况。但要检查输入条件的组合不是一件容易的事情,即使把所有输入条件划分成等价类，他们之间的组合情况也相当多。因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例。这就需要利用因果图（逻辑模型）。因果图方法最终生成的就是判定表。它适合于检查程序输入条件的各种组合情况。\n白盒测试 §\n判定表驱动分析方法 §\n判定表：是分析和表达多逻辑条件下执行不同操作的情况的工具。\n正交表设计分析方法 §\n有时候，可能因为大量的参数的组合而引起测试用例数量上的激增，同时，这些测试用例并没有明显的优先级上的差距，而测试人员又无法完成这么多数量的测试，就可以通过正交表来进行缩减一些用例，从而达到尽量少的用例覆盖尽量大的范围的可能性。\n功能图分析方法 §\n功能图：由状态迁移图和布尔函数组成，状态迁移图用状态和迁移来描述。一个状态指出数据输入的位置（或时间），而迁移则指明状态的改变。同时要依靠判定表或因果图表示的逻辑功能。\n场景模拟分析方法 §\n指根据用户场景来模拟用户的操作步骤,这个比较类似因果图,但是可能执行的深度和可行性更好。"},"Note/软件工程/软件开发模型":{"title":"软件开发模型","links":[],"tags":["测试理论","基础知识","软件工程"],"content":"瀑布模型 §\n开发流程 §\n\n计划时期：问题定义，可行性分析\n开发时期：需求分析，软件设计，编码，测试\n运行时期：维护\n\n主要特征 §\n特点： 1.里程碑或基线驱动。2.过程逆转性很差或者说不可逆转。逆转可能会延误工期，增加成本，造成损失\n优点： 1.开发阶段清晰，便于评审、审计、跟踪、管理和控制。\n缺点： 1.不可逆或很难可逆。2.问题会积累，错误会传递发散扩大，导致成本和质量失控。\n适用范围： 1.在开发时间内需求不变化或很少变化。2.分析设计人员对此领域非常熟悉。3.低风险项目。4.用户使用环境稳定（如系统软件，工具软件）\n快速原型模型 §\n开发流程 §\n需求分析 -&gt; 原型开发 -&gt; 原型评价 -&gt; 需求分析（用户反馈）\n这一种基于需求不断在原型系统上增添功能的流程\n主要特征 §\n特点： 1.容易适应需求的变化\n优点： 1.克服瀑布模型的缺点，减少由于软件需求不明确带来的开发风险。\n缺点： 1.所使用的开发工具和技术不一定符合主流的发展；快速建立起来的系统架构加上连续的修改可能会导致产品质量低下。\n适用范围： 1.需求不明确或复杂系统。2.用户无法自主提出应用需求。\n增量模型 §\n特点： 1.软件由一系列增量构件组成\n优点： 1.人员分配灵活，刚开始不用投入大量人力资源。如果核心产品很受欢迎，则可增加人力实现下一个增量。当配备人员不能在设定的时间内完成产品时，它提供了一种先推进核心产品的途径，这样即可先发部分功能给客户，对客户起到镇静剂作用。2.增量能够有计划的管理技术风险。\n缺点： 1.由于各个构件是逐渐并入已有的软件体系结构中，所以加入构件必须不破坏已构造好的系统部分，这需要软件具备开放式的体系结构。2.在开发过程中，需求变化是不可避免的，增量的灵活性可以使其适应这种变化的能力大大优于瀑布和快速原型模型，但也容易退化为边改边做模型，从而使软件过程的控制失去整体性。3.如果增量包之间存在相交的情况且未很好处理，则必须做全盘系统分析，这种模型将功能细化后分别开发的方法较适应于需求经常改变的软件开发过程。\n适用范围： 1.系统容易拆分。2.开发人力比较少。3.特别适用于商业软件（如QQ，网游）\n螺旋模型 §\n特点： 1.是一种周期性的方法进行系统开发。2.有许多“中间版本”。3.每个周期都包括需求定义、风险分析、工程实现和评审4个阶段\n优点： 1.设计上灵活，可在项目各个阶段进行变更。2.以小的分段来构建大型系统，使成本计算变得简单容易。3.客户始终参与每个阶段的开发，保证了项目不偏离正确方向以及项目的可控性。\n缺点： 1.建设周期长，而软件技术更新比较快，所以经常出现软件开发结束后，和当前的技术水平有了很大的差距，无法满足当前用户需求。\n适用范围： 1.系统庞大，风险高。2.需求不太明确。\n喷泉模型 §\n特点： 1.该模型的各个阶段没有明显的界限，开发人员可以同步进行开发。\n优点： 1.提高软件项目开发效率，节省开发时间，适用于面向对象的软件开发过程。\n缺点： 1.由于喷泉模型在各个开发阶段是重叠的，因此在开发过程中需要大量的开发人员，因此不利于项目的管理。2.要求严格管理文档，使得审核难度加大，尤其是面对可能随时加入的各种信息、需求与资料的情况。\n适用范围： 1.面向对象的软件开发过程"},"Note/软件工程/软件测试的基本流程":{"title":"软件测试的基本流程","links":[],"tags":["测试理论","基础知识","软件工程"],"content":"基本流程 §\n\n测试需求分析阶段：阅读需求，理解需求，主要就是对业务的学习，分析需求点，参与需求评审会议\n制定测试计划阶段：主要任务就是编写测试计划，参考软件需求规格说明书，项目总体计划，内容包括测试范围（来自需求文档），进度安排，人力物力的分配，整体测试策略的制定。风险评估与规避措施有一个制定。\n测试设计阶段：主要是编写测试用例，会参考需求文档（原型图），概要设计，详细设计等文档，用例编写完成之后会进行评审。\n测试执行阶段：搭建环境，执行冒烟测试（预测试）-然后进入正式测试，bug管理直到测试结束\n测试评估阶段：出测试报告，确认是否可以上线\n\n软件生命周期 §\n是指从软件的产生直到报废的整个周期，包括可行性分析与项目计划，需求分析，概要设计和详细设计，编码，调试，维护七个阶段。\n软件测试生命周期 §\n是指从测试项目计划建立到BUG提交的整个测试过程，包括软件项目测试计划，测试需求分析，测试用例设计，测试用例执行，BUG提交五个阶段。也可以是（测试计划 → 测试设计 → 测试开发 → 测试执行 → 测试评估）。软件测试生命周期并行与软件生命周期，存在于软件生命周期的各个阶段。"},"Page/关于Page的说明":{"title":"关于Page的说明","links":[],"tags":["page"],"content":""},"index":{"title":"关于这个杂货铺~","links":["About/关于About的说明","Daily/关于Daily的说明","Note/关于Note的说明","Page/关于Page的说明"],"tags":["关于本库"],"content":"欢迎来到小熊的杂货铺，这里可能记录了许多我工作，学习以及生活中的点点滴滴，可以是工作日志、学习笔记以及个人阶段总结等等，甚至可能包括菜谱（笑~），主要原因并不打算把这个打造成一个纯技术的博客，更像是个人的一个是小仓库，方便个人的总结以及分享吧~\n\n\n                  \n                  注意： \n                  \n                \n这个笔记的原始仓库是，Ailurus-2233/obsidian: 个人的obsidian笔记仓库 (github.com)，博客站展示的从中总结归纳的一些东西，而不是自己的原始笔记\n\n为什么要记录笔记 §\n\n知识积累和整理：记录笔记是一个将学到的知识整理和归档的方式，有助于更好地理解和记忆所学内容，并且结合Obsidian双链笔记的性质，更容易构建一个知识体系，在日后的工作中更能方便的检索和使用；\n与他人分享：当然，这个笔记仓库也是开源的，在我的Github上面可以拿到所有的笔记文件，通过开源分享我的笔记，可以帮助他人获得有价值的信息，促进共享和学习的文化，当然我也相信教学相长的这样一种学习途径，通过互相交流也可以检查出个人知识体系中的不足和错误的部分；\n建立个人品牌：博客可以作为展示专业知识和兴趣领域的平台，希望通过这个博客构建起一个我在互联网的”人设”，当然这个人设并不是大牛什么的（硬实力达不到hhhhh），而是一个愿意分享自己所见所想的人；\n反思和成长：这是最重要的一点，我是一个喜欢反思的人，通过写作和记录，可以不断反思自己的想法和经验，相信这对我个人的帮助是巨大的。\n\n关于本博客 §\n整个博客被分为四个模块，分别是About、Daily、Note、Page，这四个模块分别对应着四个部分的内容：\n\nAbout：这个模块是对博主本人一个说明，许多关于我的信息可以在这里找到，比如联系方式、当前的工作、近期的状态等等，感觉这个模块并不会有太多的变化，基本第一次写完就不会再去改动之类的；\nDaily：这个部分为以下零碎的笔记，可能是某个问题的解决方案、看的书或者视频的一些感悟或者生活中其他的点点滴滴，如果我想做一个总结便会出现在这个部分；\nNote：整个博客最核心的部分，也就是我的个人知识库，这个模块包含我所有总结的笔记和Daily中可以收纳整理的零碎知识，我会为此做一个完整目录，以方便任何时候进行检索\nPage：这个部分主要放一些其他的页面，不适合放在上面三个部分的任何一个时，它就会出现在这个模块中，就像是一个小孩子的玩具箱~\n\n个人博客的选型 §\n这个博客是搭建在云服务器上一个静态页面，当然在github page 上也有搭建；\n\n云服务器：选用的是最低配置的轻量级应用服务器，够跑nginx即可\n笔记软件：这里本地才用Obsidian作为笔记软件，一款强大的知识管理和笔记撰写工具，双链用起来是真的舒服。详情请访问 Obsidian 官网。\n博客框架：原来是使用hexo作为框架来编写博客，他支持的markdown语法和Obsidian原生语法有点点不一致，而且很难发现一个简洁明了的主题，综合考虑采用了Quartz 作为生成和部署静态网站的工具，他能够很好支持obsidian的语法，同时也不需要单独的分出一个仓库来服务博客框架。更多详情请访问 Quartz 官网。\n\n详细的搭建过程会专门有篇博客来记录的~\n关于我 §\n关于我自己，自认为是一个喜欢瞎折腾的玩家，学过Java、Python、C#、Go，搞过前端、后端、桌面端，喜欢用Windows开发，但是有又孜孜不倦的去尝试各种linux发行版（没钱买mac）~感觉什么都挺感兴趣的，是在广度上铺的很开一个人，所以可能在博客里可能看到各种各样的东西~\n如何联系我 §\nGithub: Ailurus-2233 (Aillurus2233) (github.com)\nE-mail: Ailurus2233@outlook.com\n\n\n                  \n                  注意 \n                  \n                \n这是一个新的博客框架，为了替换以前使用Hexo，调整好框架外观后，最近就会把以前博客中的内容一点一点的整理过来 2023-11-23\n"}}